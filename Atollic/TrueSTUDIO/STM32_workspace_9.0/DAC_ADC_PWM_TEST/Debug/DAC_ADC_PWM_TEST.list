
DAC_ADC_PWM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005330  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08005520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  20000004  08005524  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000158  08005524  00020158  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010b53  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fd6  00000000  00000000  00030b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011e0  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d8  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007bb8  00000000  00000000  00034e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000582b  00000000  00000000  0003c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000421fb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004cc0  00000000  00000000  00042278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054a0 	.word	0x080054a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080054a0 	.word	0x080054a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f001 fa8c 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f004 fe03 	bl	8005110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_InitTick+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <HAL_InitTick+0x44>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fa92 	bl	8001a5a <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e005      	b.n	800054e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f001 fa6a 	bl	8001a22 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000000 	.word	0x20000000
 800055c:	10624dd3 	.word	0x10624dd3

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick++;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x18>)
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	20000024 	.word	0x20000024

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000024 	.word	0x20000024

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff ffee 	bl	800057c <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d002      	beq.n	80005b4 <HAL_Delay+0x20>
  {
    wait++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b4:	bf00      	nop
 80005b6:	f7ff ffe1 	bl	800057c <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d3f7      	bcc.n	80005b6 <HAL_Delay+0x22>
  {
  }
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	609a      	str	r2, [r3, #8]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	431a      	orrs	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	609a      	str	r2, [r3, #8]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000638:	b490      	push	{r4, r7}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3360      	adds	r3, #96	; 0x60
 800064a:	461a      	mov	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000654:	6822      	ldr	r2, [r4, #0]
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LL_ADC_SetOffset+0x40>)
 8000658:	4013      	ands	r3, r2
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	430a      	orrs	r2, r1
 8000664:	4313      	orrs	r3, r2
 8000666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bc90      	pop	{r4, r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	03fff000 	.word	0x03fff000

0800067c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800067c:	b490      	push	{r4, r7}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3360      	adds	r3, #96	; 0x60
 800068a:	461a      	mov	r2, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	461c      	mov	r4, r3
  
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc90      	pop	{r4, r7}
 80006a2:	4770      	bx	lr

080006a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006a4:	b490      	push	{r4, r7}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3360      	adds	r3, #96	; 0x60
 80006b4:	461a      	mov	r2, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc90      	pop	{r4, r7}
 80006d2:	4770      	bx	lr

080006d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006fa:	b490      	push	{r4, r7}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	461a      	mov	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	f003 030c 	and.w	r3, r3, #12
 8000716:	4413      	add	r3, r2
 8000718:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800071a:	6822      	ldr	r2, [r4, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	211f      	movs	r1, #31
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	401a      	ands	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0e9b      	lsrs	r3, r3, #26
 8000730:	f003 011f 	and.w	r1, r3, #31
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f003 031f 	and.w	r3, r3, #31
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr

0800074c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800074c:	b490      	push	{r4, r7}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3314      	adds	r3, #20
 800075c:	461a      	mov	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	0e5b      	lsrs	r3, r3, #25
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	4413      	add	r3, r2
 800076a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800076c:	6822      	ldr	r2, [r4, #0]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	0d1b      	lsrs	r3, r3, #20
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	2107      	movs	r1, #7
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	401a      	ands	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	0d1b      	lsrs	r3, r3, #20
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bc90      	pop	{r4, r7}
 800079a:	4770      	bx	lr

0800079c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007b4:	43db      	mvns	r3, r3
 80007b6:	401a      	ands	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0318 	and.w	r3, r3, #24
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007c0:	40d9      	lsrs	r1, r3
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	400b      	ands	r3, r1
 80007c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007ca:	431a      	orrs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	0007ffff 	.word	0x0007ffff

080007e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 031f 	and.w	r3, r3, #31
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800082c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	6093      	str	r3, [r2, #8]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000854:	d101      	bne.n	800085a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000856:	2301      	movs	r3, #1
 8000858:	e000      	b.n	800085c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800087c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008a4:	d101      	bne.n	80008aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008f4:	f043 0202 	orr.w	r2, r3, #2
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b01      	cmp	r3, #1
 800091a:	d101      	bne.n	8000920 <LL_ADC_IsEnabled+0x18>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <LL_ADC_IsEnabled+0x1a>
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b02      	cmp	r3, #2
 8000940:	d101      	bne.n	8000946 <LL_ADC_IsDisableOngoing+0x18>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_ADC_IsDisableOngoing+0x1a>
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000968:	f043 0204 	orr.w	r2, r3, #4
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b04      	cmp	r3, #4
 800098e:	d101      	bne.n	8000994 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b08      	cmp	r3, #8
 80009b4:	d101      	bne.n	80009ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e134      	b.n	8000c4c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f004 fbdb 	bl	80051ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff19 	bl	8000840 <LL_ADC_IsDeepPowerDownEnabled>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff feff 	bl	800081c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff34 	bl	8000890 <LL_ADC_IsInternalRegulatorEnabled>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d113      	bne.n	8000a56 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff18 	bl	8000868 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a38:	4b86      	ldr	r3, [pc, #536]	; (8000c54 <HAL_ADC_Init+0x28c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	099b      	lsrs	r3, r3, #6
 8000a3e:	4a86      	ldr	r2, [pc, #536]	; (8000c58 <HAL_ADC_Init+0x290>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000a48:	e002      	b.n	8000a50 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f9      	bne.n	8000a4a <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff18 	bl	8000890 <LL_ADC_IsInternalRegulatorEnabled>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10d      	bne.n	8000a82 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a6a:	f043 0210 	orr.w	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff78 	bl	800097c <LL_ADC_REG_IsConversionOngoing>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80cf 	bne.w	8000c3a <HAL_ADC_Init+0x272>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 80cb 	bne.w	8000c3a <HAL_ADC_Init+0x272>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000aac:	f043 0202 	orr.w	r2, r3, #2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff25 	bl	8000908 <LL_ADC_IsEnabled>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d115      	bne.n	8000af0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ac4:	4865      	ldr	r0, [pc, #404]	; (8000c5c <HAL_ADC_Init+0x294>)
 8000ac6:	f7ff ff1f 	bl	8000908 <LL_ADC_IsEnabled>
 8000aca:	4604      	mov	r4, r0
 8000acc:	4864      	ldr	r0, [pc, #400]	; (8000c60 <HAL_ADC_Init+0x298>)
 8000ace:	f7ff ff1b 	bl	8000908 <LL_ADC_IsEnabled>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	4863      	ldr	r0, [pc, #396]	; (8000c64 <HAL_ADC_Init+0x29c>)
 8000ad8:	f7ff ff16 	bl	8000908 <LL_ADC_IsEnabled>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	485f      	ldr	r0, [pc, #380]	; (8000c68 <HAL_ADC_Init+0x2a0>)
 8000aec:	f7ff fd6f 	bl	80005ce <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e5b      	ldrb	r3, [r3, #25]
 8000af4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000afa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000b00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000b06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	3b01      	subs	r3, #1
 8000b24:	045b      	lsls	r3, r3, #17
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d009      	beq.n	8000b48 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68d9      	ldr	r1, [r3, #12]
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_ADC_Init+0x2a4>)
 8000b54:	400b      	ands	r3, r1
 8000b56:	69b9      	ldr	r1, [r7, #24]
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff0b 	bl	800097c <LL_ADC_REG_IsConversionOngoing>
 8000b66:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff18 	bl	80009a2 <LL_ADC_INJ_IsConversionOngoing>
 8000b72:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d13d      	bne.n	8000bf6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d13a      	bne.n	8000bf6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000b84:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ba0:	f023 0302 	bic.w	r3, r3, #2
 8000ba4:	69b9      	ldr	r1, [r7, #24]
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d118      	bne.n	8000be6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000bc2:	f023 0304 	bic.w	r3, r3, #4
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bce:	4308      	orrs	r0, r1
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000bd4:	4308      	orrs	r0, r1
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000bda:	4301      	orrs	r1, r0
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6113      	str	r3, [r2, #16]
 8000be4:	e007      	b.n	8000bf6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	6912      	ldr	r2, [r2, #16]
 8000bf0:	f022 0201 	bic.w	r2, r2, #1
 8000bf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d10c      	bne.n	8000c18 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c08:	f022 010f 	bic.w	r1, r2, #15
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	69d2      	ldr	r2, [r2, #28]
 8000c10:	3a01      	subs	r2, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
 8000c16:	e007      	b.n	8000c28 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c22:	f022 020f 	bic.w	r2, r2, #15
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	655a      	str	r2, [r3, #84]	; 0x54
 8000c38:	e007      	b.n	8000c4a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3e:	f043 0210 	orr.w	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3724      	adds	r7, #36	; 0x24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	053e2d63 	.word	0x053e2d63
 8000c5c:	50040000 	.word	0x50040000
 8000c60:	50040100 	.word	0x50040100
 8000c64:	50040200 	.word	0x50040200
 8000c68:	50040300 	.word	0x50040300
 8000c6c:	fff0c007 	.word	0xfff0c007

08000c70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c78:	4857      	ldr	r0, [pc, #348]	; (8000dd8 <HAL_ADC_Start+0x168>)
 8000c7a:	f7ff fdb3 	bl	80007e4 <LL_ADC_GetMultimode>
 8000c7e:	6138      	str	r0, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe79 	bl	800097c <LL_ADC_REG_IsConversionOngoing>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f040 809c 	bne.w	8000dca <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_ADC_Start+0x30>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e097      	b.n	8000dd0 <HAL_ADC_Start+0x160>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fccd 	bl	8001648 <ADC_Enable>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8083 	bne.w	8000dc0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_ADC_Start+0x16c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d002      	beq.n	8000cde <HAL_ADC_Start+0x6e>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	e000      	b.n	8000ce0 <HAL_ADC_Start+0x70>
 8000cde:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <HAL_ADC_Start+0x170>)
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d002      	beq.n	8000cee <HAL_ADC_Start+0x7e>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif
      
      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d06:	d106      	bne.n	8000d16 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	f023 0206 	bic.w	r2, r3, #6
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	659a      	str	r2, [r3, #88]	; 0x58
 8000d14:	e002      	b.n	8000d1c <HAL_ADC_Start+0xac>
      }
      else
      {  
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc); 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	659a      	str	r2, [r3, #88]	; 0x58
      }
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	221c      	movs	r2, #28
 8000d22:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_ADC_Start+0x16c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d002      	beq.n	8000d3c <HAL_ADC_Start+0xcc>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	e000      	b.n	8000d3e <HAL_ADC_Start+0xce>
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_ADC_Start+0x170>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d008      	beq.n	8000d58 <HAL_ADC_Start+0xe8>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d005      	beq.n	8000d58 <HAL_ADC_Start+0xe8>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d002      	beq.n	8000d58 <HAL_ADC_Start+0xe8>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	d114      	bne.n	8000d82 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
        }
        
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fdea 	bl	8000954 <LL_ADC_REG_StartConversion>
 8000d80:	e025      	b.n	8000dce <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting 
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_ADC_Start+0x16c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d002      	beq.n	8000d9e <HAL_ADC_Start+0x12e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_Start+0x130>
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_ADC_Start+0x170>)
 8000da0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00f      	beq.n	8000dce <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	655a      	str	r2, [r3, #84]	; 0x54
 8000dbe:	e006      	b.n	8000dce <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000dc8:	e001      	b.n	8000dce <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	50040300 	.word	0x50040300
 8000ddc:	50040100 	.word	0x50040100
 8000de0:	50040000 	.word	0x50040000

08000de4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000dee:	4862      	ldr	r0, [pc, #392]	; (8000f78 <HAL_ADC_PollForConversion+0x194>)
 8000df0:	f7ff fcf8 	bl	80007e4 <LL_ADC_GetMultimode>
 8000df4:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d102      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e02a      	b.n	8000e5a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <HAL_ADC_PollForConversion+0x32>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d002      	beq.n	8000e16 <HAL_ADC_PollForConversion+0x32>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b09      	cmp	r3, #9
 8000e14:	d111      	bne.n	8000e3a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	f043 0220 	orr.w	r2, r3, #32
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e09d      	b.n	8000f70 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e34:	2304      	movs	r3, #4
 8000e36:	61fb      	str	r3, [r7, #28]
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e38:	e00f      	b.n	8000e5a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000e3a:	484f      	ldr	r0, [pc, #316]	; (8000f78 <HAL_ADC_PollForConversion+0x194>)
 8000e3c:	f7ff fce0 	bl	8000800 <LL_ADC_GetMultiDMATransfer>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4a:	f043 0220 	orr.w	r2, r3, #32
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e08c      	b.n	8000f70 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000e56:	2304      	movs	r3, #4
 8000e58:	61fb      	str	r3, [r7, #28]
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e5a:	f7ff fb8f 	bl	800057c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e60:	e01a      	b.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d016      	beq.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000e6a:	f7ff fb87 	bl	800057c <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad2      	subs	r2, r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d802      	bhi.n	8000e80 <HAL_ADC_PollForConversion+0x9c>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e84:	f043 0204 	orr.w	r2, r3, #4
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        
        return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e06b      	b.n	8000f70 <HAL_ADC_PollForConversion+0x18c>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0dd      	beq.n	8000e62 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc0c 	bl	80006d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d01c      	beq.n	8000efc <HAL_ADC_PollForConversion+0x118>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7e5b      	ldrb	r3, [r3, #25]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d118      	bne.n	8000efc <HAL_ADC_PollForConversion+0x118>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d111      	bne.n	8000efc <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	655a      	str	r2, [r3, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_ADC_PollForConversion+0x198>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d002      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x128>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	e000      	b.n	8000f0e <HAL_ADC_PollForConversion+0x12a>
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_ADC_PollForConversion+0x19c>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d008      	beq.n	8000f28 <HAL_ADC_PollForConversion+0x144>
       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_ADC_PollForConversion+0x144>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d002      	beq.n	8000f28 <HAL_ADC_PollForConversion+0x144>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d104      	bne.n	8000f32 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	e00c      	b.n	8000f4c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <HAL_ADC_PollForConversion+0x198>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d002      	beq.n	8000f42 <HAL_ADC_PollForConversion+0x15e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e000      	b.n	8000f44 <HAL_ADC_PollForConversion+0x160>
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_ADC_PollForConversion+0x19c>)
 8000f44:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d104      	bne.n	8000f5c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2208      	movs	r2, #8
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e008      	b.n	8000f6e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	50040300 	.word	0x50040300
 8000f7c:	50040100 	.word	0x50040100
 8000f80:	50040000 	.word	0x50040000

08000f84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0a6      	sub	sp, #152	; 0x98
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_ConfigChannel+0x22>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e338      	b.n	8001634 <HAL_ADC_ConfigChannel+0x694>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fcd4 	bl	800097c <LL_ADC_REG_IsConversionOngoing>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f040 8319 	bne.w	800160e <HAL_ADC_ConfigChannel+0x66e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d824      	bhi.n	800102e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d81b      	bhi.n	8001026 <HAL_ADC_ConfigChannel+0x86>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <HAL_ADC_ConfigChannel+0x54>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	0800100d 	.word	0x0800100d
 8000ffc:	08001015 	.word	0x08001015
 8001000:	0800101d 	.word	0x0800101d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	220c      	movs	r2, #12
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	e010      	b.n	800102e <HAL_ADC_ConfigChannel+0x8e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2212      	movs	r2, #18
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	e00c      	b.n	800102e <HAL_ADC_ConfigChannel+0x8e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2218      	movs	r2, #24
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	e008      	b.n	800102e <HAL_ADC_ConfigChannel+0x8e>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	e003      	b.n	800102e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2206      	movs	r2, #6
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	bf00      	nop
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	6859      	ldr	r1, [r3, #4]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f7ff fb5d 	bl	80006fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fc99 	bl	800097c <LL_ADC_REG_IsConversionOngoing>
 800104a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fca5 	bl	80009a2 <LL_ADC_INJ_IsConversionOngoing>
 8001058:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800105c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001060:	2b00      	cmp	r3, #0
 8001062:	f040 8140 	bne.w	80012e6 <HAL_ADC_ConfigChannel+0x346>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 813b 	bne.w	80012e6 <HAL_ADC_ConfigChannel+0x346>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	f7ff fb65 	bl	800074c <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00a      	beq.n	80010ba <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6919      	ldr	r1, [r3, #16]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010b4:	f7ff fac0 	bl	8000638 <LL_ADC_SetOffset>
 80010b8:	e115      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x346>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fadb 	bl	800067c <LL_ADC_GetOffsetChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x146>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fad0 	bl	800067c <LL_ADC_GetOffsetChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	0e9b      	lsrs	r3, r3, #26
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	e011      	b.n	800110a <HAL_ADC_ConfigChannel+0x16a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fac5 	bl	800067c <LL_ADC_GetOffsetChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x182>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0e9b      	lsrs	r3, r3, #26
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	e009      	b.n	8001136 <HAL_ADC_ConfigChannel+0x196>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8001130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	429a      	cmp	r2, r3
 8001138:	d106      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff faae 	bl	80006a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa94 	bl	800067c <LL_ADC_GetOffsetChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10a      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x1d4>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fa89 	bl	800067c <LL_ADC_GetOffsetChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	0e9b      	lsrs	r3, r3, #26
 800116e:	f003 021f 	and.w	r2, r3, #31
 8001172:	e00f      	b.n	8001194 <HAL_ADC_ConfigChannel+0x1f4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa7e 	bl	800067c <LL_ADC_GetOffsetChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800118c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x20c>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0e9b      	lsrs	r3, r3, #26
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	e009      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x220>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80011ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d106      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x232>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fa69 	bl	80006a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2102      	movs	r1, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fa4f 	bl	800067c <LL_ADC_GetOffsetChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x25e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2102      	movs	r1, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fa44 	bl	800067c <LL_ADC_GetOffsetChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	0e9b      	lsrs	r3, r3, #26
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	e00f      	b.n	800121e <HAL_ADC_ConfigChannel+0x27e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2102      	movs	r1, #2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fa39 	bl	800067c <LL_ADC_GetOffsetChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8001216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x296>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0e9b      	lsrs	r3, r3, #26
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	e009      	b.n	800124a <HAL_ADC_ConfigChannel+0x2aa>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	429a      	cmp	r2, r3
 800124c:	d106      	bne.n	800125c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa24 	bl	80006a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2103      	movs	r1, #3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa0a 	bl	800067c <LL_ADC_GetOffsetChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10a      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2e8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2103      	movs	r1, #3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f9ff 	bl	800067c <LL_ADC_GetOffsetChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	0e9b      	lsrs	r3, r3, #26
 8001282:	f003 021f 	and.w	r2, r3, #31
 8001286:	e00f      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x308>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2103      	movs	r1, #3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f9f4 	bl	800067c <LL_ADC_GetOffsetChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80012a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x320>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0e9b      	lsrs	r3, r3, #26
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	e009      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x334>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80012ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d106      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x346>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	2103      	movs	r1, #3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f9df 	bl	80006a4 <LL_ADC_SetOffsetState>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fb0c 	bl	8000908 <LL_ADC_IsEnabled>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 8105 	bne.w	8001502 <HAL_ADC_ConfigChannel+0x562>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	461a      	mov	r2, r3
 8001306:	f7ff fa49 	bl	800079c <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4aaa      	ldr	r2, [pc, #680]	; (80015b8 <HAL_ADC_ConfigChannel+0x618>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 80f6 	bne.w	8001502 <HAL_ADC_ConfigChannel+0x562>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <HAL_ADC_ConfigChannel+0x39e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0e9b      	lsrs	r3, r3, #26
 800132c:	3301      	adds	r3, #1
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	2b09      	cmp	r3, #9
 8001334:	bf94      	ite	ls
 8001336:	2301      	movls	r3, #1
 8001338:	2300      	movhi	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	e011      	b.n	8001362 <HAL_ADC_ConfigChannel+0x3c2>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800134c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	3301      	adds	r3, #1
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2b09      	cmp	r3, #9
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d061      	beq.n	800142a <HAL_ADC_ConfigChannel+0x48a>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x3e2>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0e9b      	lsrs	r3, r3, #26
 8001378:	3301      	adds	r3, #1
 800137a:	069b      	lsls	r3, r3, #26
 800137c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001380:	e00d      	b.n	800139e <HAL_ADC_ConfigChannel+0x3fe>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	069b      	lsls	r3, r3, #26
 800139a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_ADC_ConfigChannel+0x41e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0e9b      	lsrs	r3, r3, #26
 80013b0:	3301      	adds	r3, #1
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	e00f      	b.n	80013de <HAL_ADC_ConfigChannel+0x43e>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	ea42 0103 	orr.w	r1, r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x464>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0e9b      	lsrs	r3, r3, #26
 80013f4:	3301      	adds	r3, #1
 80013f6:	f003 021f 	and.w	r2, r3, #31
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	e010      	b.n	8001426 <HAL_ADC_ConfigChannel+0x486>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f003 021f 	and.w	r2, r3, #31
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	051b      	lsls	r3, r3, #20
 8001426:	430b      	orrs	r3, r1
 8001428:	e066      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x558>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x4a6>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0e9b      	lsrs	r3, r3, #26
 800143c:	3301      	adds	r3, #1
 800143e:	069b      	lsls	r3, r3, #26
 8001440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001444:	e00d      	b.n	8001462 <HAL_ADC_ConfigChannel+0x4c2>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	61fb      	str	r3, [r7, #28]
  return(result);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	3301      	adds	r3, #1
 800145c:	069b      	lsls	r3, r3, #26
 800145e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x4e2>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0e9b      	lsrs	r3, r3, #26
 8001474:	3301      	adds	r3, #1
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	e00f      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x502>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	617b      	str	r3, [r7, #20]
  return(result);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	ea42 0103 	orr.w	r1, r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x52e>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0e9b      	lsrs	r3, r3, #26
 80014b8:	3301      	adds	r3, #1
 80014ba:	f003 021f 	and.w	r2, r3, #31
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	3b1e      	subs	r3, #30
 80014c6:	051b      	lsls	r3, r3, #20
 80014c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014cc:	e013      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x556>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	60fb      	str	r3, [r7, #12]
  return(result);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f6:	430b      	orrs	r3, r1
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6892      	ldr	r2, [r2, #8]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff f925 	bl	800074c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_ADC_ConfigChannel+0x61c>)
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 808c 	beq.w	8001628 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001510:	482b      	ldr	r0, [pc, #172]	; (80015c0 <HAL_ADC_ConfigChannel+0x620>)
 8001512:	f7ff f882 	bl	800061a <LL_ADC_GetCommonPathInternalCh>
 8001516:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <HAL_ADC_ConfigChannel+0x624>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d12b      	bne.n	800157c <HAL_ADC_ConfigChannel+0x5dc>
 8001524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d125      	bne.n	800157c <HAL_ADC_ConfigChannel+0x5dc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_ADC_ConfigChannel+0x628>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d004      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x5a4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_ADC_ConfigChannel+0x62c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d16e      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x682>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800154c:	4619      	mov	r1, r3
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <HAL_ADC_ConfigChannel+0x620>)
 8001550:	f7ff f850 	bl	80005f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_ADC_ConfigChannel+0x630>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_ADC_ConfigChannel+0x634>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	099a      	lsrs	r2, r3, #6
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800156c:	e002      	b.n	8001574 <HAL_ADC_ConfigChannel+0x5d4>
          {
            wait_loop_index--;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3b01      	subs	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f9      	bne.n	800156e <HAL_ADC_ConfigChannel+0x5ce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800157a:	e052      	b.n	8001622 <HAL_ADC_ConfigChannel+0x682>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_ADC_ConfigChannel+0x638>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12a      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x63c>
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d124      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x63c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_ADC_ConfigChannel+0x628>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d004      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x606>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_ADC_ConfigChannel+0x62c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d13f      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x686>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80015a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ae:	4619      	mov	r1, r3
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <HAL_ADC_ConfigChannel+0x620>)
 80015b2:	f7ff f81f 	bl	80005f4 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015b6:	e036      	b.n	8001626 <HAL_ADC_ConfigChannel+0x686>
 80015b8:	407f0000 	.word	0x407f0000
 80015bc:	80080000 	.word	0x80080000
 80015c0:	50040300 	.word	0x50040300
 80015c4:	c7520000 	.word	0xc7520000
 80015c8:	50040000 	.word	0x50040000
 80015cc:	50040200 	.word	0x50040200
 80015d0:	20000000 	.word	0x20000000
 80015d4:	053e2d63 	.word	0x053e2d63
 80015d8:	cb840000 	.word	0xcb840000
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_ADC_ConfigChannel+0x69c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d120      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x688>
 80015e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <HAL_ADC_ConfigChannel+0x6a0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d115      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80015fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001604:	4619      	mov	r1, r3
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <HAL_ADC_ConfigChannel+0x6a4>)
 8001608:	f7fe fff4 	bl	80005f4 <LL_ADC_SetCommonPathInternalCh>
 800160c:	e00c      	b.n	8001628 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x688>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001622:	bf00      	nop
 8001624:	e000      	b.n	8001628 <HAL_ADC_ConfigChannel+0x688>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001626:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8001630:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001634:	4618      	mov	r0, r3
 8001636:	3798      	adds	r7, #152	; 0x98
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	80000001 	.word	0x80000001
 8001640:	50040000 	.word	0x50040000
 8001644:	50040300 	.word	0x50040300

08001648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f957 	bl	8000908 <LL_ADC_IsEnabled>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d146      	bne.n	80016ee <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <ADC_Enable+0xb0>)
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e032      	b.n	80016f0 <ADC_Enable+0xa8>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f912 	bl	80008b8 <LL_ADC_Enable>
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001694:	f7fe ff72 	bl	800057c <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800169a:	e021      	b.n	80016e0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f931 	bl	8000908 <LL_ADC_IsEnabled>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d104      	bne.n	80016b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f901 	bl	80008b8 <LL_ADC_Enable>
      }
      
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016b6:	f7fe ff61 	bl	800057c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d90d      	bls.n	80016e0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0210 	orr.w	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e007      	b.n	80016f0 <ADC_Enable+0xa8>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d1d6      	bne.n	800169c <ADC_Enable+0x54>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	8000003f 	.word	0x8000003f

080016fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f910 	bl	800092e <LL_ADC_IsDisableOngoing>
 800170e:	60f8      	str	r0, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f8f7 	bl	8000908 <LL_ADC_IsEnabled>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d040      	beq.n	80017a2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d13d      	bne.n	80017a2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030d 	and.w	r3, r3, #13
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10c      	bne.n	800174e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f8d1 	bl	80008e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2203      	movs	r2, #3
 8001744:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001746:	f7fe ff19 	bl	800057c <HAL_GetTick>
 800174a:	60b8      	str	r0, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800174c:	e022      	b.n	8001794 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	f043 0210 	orr.w	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e01c      	b.n	80017a4 <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800176a:	f7fe ff07 	bl	800057c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d90d      	bls.n	8001794 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f043 0210 	orr.w	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e007      	b.n	80017a4 <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e3      	bne.n	800176a <ADC_Disable+0x6e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LL_ADC_IsCalibrationOnGoing>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e059      	b.n	80018a4 <HAL_ADCEx_Calibration_Start+0xd0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff7f 	bl	80016fc <ADC_Disable>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d142      	bne.n	800188e <HAL_ADCEx_Calibration_Start+0xba>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001810:	f023 0302 	bic.w	r3, r3, #2
 8001814:	f043 0202 	orr.w	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_BUSY_INTERNAL);

    

    /* Select calibration mode single ended or differential ended */
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	6892      	ldr	r2, [r2, #8]
 8001826:	f022 4180 	bic.w	r1, r2, #1073741824	; 0x40000000
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800183e:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001840:	e014      	b.n	800186c <HAL_ADCEx_Calibration_Start+0x98>
    {
      wait_loop_index++;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800184e:	d30d      	bcc.n	800186c <HAL_ADCEx_Calibration_Start+0x98>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f023 0312 	bic.w	r3, r3, #18
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e01b      	b.n	80018a4 <HAL_ADCEx_Calibration_Start+0xd0>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff9b 	bl	80017ac <LL_ADC_IsCalibrationOnGoing>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e2      	bne.n	8001842 <HAL_ADCEx_Calibration_Start+0x6e>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	f023 0303 	bic.w	r3, r3, #3
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
 800188c:	e005      	b.n	800189a <HAL_ADCEx_Calibration_Start+0xc6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	da0b      	bge.n	800193c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	490d      	ldr	r1, [pc, #52]	; (800195c <NVIC_SetPriority+0x4c>)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	3b04      	subs	r3, #4
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193a:	e009      	b.n	8001950 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	4908      	ldr	r1, [pc, #32]	; (8001960 <NVIC_SetPriority+0x50>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	e000e100 	.word	0xe000e100

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	2201      	movs	r2, #1
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	401a      	ands	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019aa:	2101      	movs	r1, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	1e59      	subs	r1, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff90 	bl	8001910 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff49 	bl	80018ac <NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff5e 	bl	80018f4 <NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff90 	bl	8001964 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5f 	bl	8001910 <NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffb0 	bl	80019c8 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d106      	bne.n	8001a90 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001a8e:	e005      	b.n	8001a9c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ab0:	f000 f802 	bl	8001ab8 <HAL_SYSTICK_Callback>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e014      	b.n	8001b02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d105      	bne.n	8001aee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f003 fb8b 	bl	8005204 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2202      	movs	r2, #2
 8001af2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_DAC_Start+0x16>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e03c      	b.n	8001b9a <HAL_DAC_Start+0x90>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	6811      	ldr	r1, [r2, #0]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	f002 0210 	and.w	r2, r2, #16
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <HAL_DAC_Start+0x62>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d118      	bne.n	8001b8c <HAL_DAC_Start+0x82>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	6852      	ldr	r2, [r2, #4]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	e00f      	b.n	8001b8c <HAL_DAC_Start+0x82>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b7a:	d107      	bne.n	8001b8c <HAL_DAC_Start+0x82>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	6852      	ldr	r2, [r2, #4]
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3308      	adds	r3, #8
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e004      	b.n	8001bda <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1, tmpreg2;
  uint32_t tickstart = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	795b      	ldrb	r3, [r3, #5]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_DAC_ConfigChannel+0x1c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e107      	b.n	8001e1c <HAL_DAC_ConfigChannel+0x22c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	711a      	strb	r2, [r3, #4]

  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d174      	bne.n	8001d0a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d137      	bne.n	8001c96 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001c26:	f7fe fca9 	bl	800057c <HAL_GetTick>
 8001c2a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c2c:	e011      	b.n	8001c52 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c2e:	f7fe fca5 	bl	800057c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d90a      	bls.n	8001c52 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f043 0208 	orr.w	r2, r3, #8
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0e4      	b.n	8001e1c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e6      	bne.n	8001c2e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7fe fc97 	bl	8000594 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	6992      	ldr	r2, [r2, #24]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c70:	e01e      	b.n	8001cb0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c72:	f7fe fc83 	bl	800057c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d90a      	bls.n	8001c96 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f043 0208 	orr.w	r2, r3, #8
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0c2      	b.n	8001e1c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dbe8      	blt.n	8001c72 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7fe fc77 	bl	8000594 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	6992      	ldr	r2, [r2, #24]
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	f002 0210 	and.w	r2, r2, #16
 8001cc0:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001cc4:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc8:	43d2      	mvns	r2, r2
 8001cca:	4011      	ands	r1, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	69d0      	ldr	r0, [r2, #28]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f002 0210 	and.w	r2, r2, #16
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	f002 0210 	and.w	r2, r2, #16
 8001cee:	20ff      	movs	r0, #255	; 0xff
 8001cf0:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf4:	43d2      	mvns	r2, r2
 8001cf6:	4011      	ands	r1, r2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	6a10      	ldr	r0, [r2, #32]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	f002 0210 	and.w	r2, r2, #16
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	430a      	orrs	r2, r1
 8001d08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d11d      	bne.n	8001d4e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	221f      	movs	r2, #31
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	6811      	ldr	r1, [r2, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	f002 0210 	and.w	r2, r2, #16
 8001da6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	43d2      	mvns	r2, r2
 8001db0:	400a      	ands	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	601a      	str	r2, [r3, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	f002 0210 	and.w	r2, r2, #16
 8001e02:	20c0      	movs	r0, #192	; 0xc0
 8001e04:	fa00 f202 	lsl.w	r2, r0, r2
 8001e08:	43d2      	mvns	r2, r2
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e17f      	b.n	8002134 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8171 	beq.w	800212e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x38>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	6939      	ldr	r1, [r7, #16]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d00b      	beq.n	8001ef8 <HAL_GPIO_Init+0xd4>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d130      	bne.n	8001f5a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0201 	and.w	r2, r3, #1
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d118      	bne.n	8001f98 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80ac 	beq.w	800212e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4a5e      	ldr	r2, [pc, #376]	; (8002150 <HAL_GPIO_Init+0x32c>)
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_GPIO_Init+0x32c>)
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_GPIO_Init+0x32c>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fee:	4a59      	ldr	r2, [pc, #356]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x242>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_GPIO_Init+0x334>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_GPIO_Init+0x338>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_GPIO_Init+0x33c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_GPIO_Init+0x340>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_GPIO_Init+0x344>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x348>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x22a>
 800204a:	2306      	movs	r3, #6
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800204e:	2307      	movs	r3, #7
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002066:	2300      	movs	r3, #0
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_GPIO_Init+0x330>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_GPIO_Init+0x34c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020aa:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_GPIO_Init+0x34c>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_GPIO_Init+0x34c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_GPIO_Init+0x34c>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_GPIO_Init+0x34c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_GPIO_Init+0x34c>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_GPIO_Init+0x34c>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002128:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_GPIO_Init+0x34c>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae78 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	48000c00 	.word	0x48000c00
 8002164:	48001000 	.word	0x48001000
 8002168:	48001400 	.word	0x48001400
 800216c:	48001800 	.word	0x48001800
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002190:	e002      	b.n	8002198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_PWREx_GetVoltageRange+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ce:	d130      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d038      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2232      	movs	r2, #50	; 0x32
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002204:	e002      	b.n	800220c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d102      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f2      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d110      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e00f      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d007      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000
 8002264:	20000000 	.word	0x20000000
 8002268:	431bde83 	.word	0x431bde83

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e353      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227e:	4ba3      	ldr	r3, [pc, #652]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	4ba0      	ldr	r3, [pc, #640]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80df 	beq.w	800245e <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4a>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	f040 8086 	bne.w	80023ba <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f040 8082 	bne.w	80023ba <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b6:	4b95      	ldr	r3, [pc, #596]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x62>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e32b      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_RCC_OscConfig+0x7c>
 80022de:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e6:	e005      	b.n	80022f4 <HAL_RCC_OscConfig+0x88>
 80022e8:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d923      	bls.n	8002340 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fccb 	bl	8002c98 <RCC_SetFlashLatencyFromMSIRange>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e30c      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	4a7f      	ldr	r2, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	497c      	ldr	r1, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232a:	4978      	ldr	r1, [pc, #480]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800232c:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
 800233e:	e022      	b.n	8002386 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002340:	4a72      	ldr	r2, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	496f      	ldr	r1, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235e:	496b      	ldr	r1, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fc8e 	bl	8002c98 <RCC_SetFlashLatencyFromMSIRange>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e2cf      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002386:	f000 fbb3 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 800238a:	4601      	mov	r1, r0
 800238c:	4b5f      	ldr	r3, [pc, #380]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a5e      	ldr	r2, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x2a4>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	fa21 f303 	lsr.w	r3, r1, r3
 80023a2:	4a5c      	ldr	r2, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x2a8>)
 80023a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe f8b6 	bl	8000518 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d052      	beq.n	800245c <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	e2b5      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d032      	beq.n	8002428 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c2:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80023c4:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ce:	f7fe f8d5 	bl	800057c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d6:	f7fe f8d1 	bl	800057c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e29e      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e8:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f4:	4a45      	ldr	r2, [pc, #276]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80023f6:	4b45      	ldr	r3, [pc, #276]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4942      	ldr	r1, [pc, #264]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002412:	493e      	ldr	r1, [pc, #248]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
 8002426:	e01a      	b.n	800245e <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002434:	f7fe f8a2 	bl	800057c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243c:	f7fe f89e 	bl	800057c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e26b      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1d0>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d072      	beq.n	8002550 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d005      	beq.n	800247c <HAL_RCC_OscConfig+0x210>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d10e      	bne.n	8002494 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d062      	beq.n	800254e <HAL_RCC_OscConfig+0x2e2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d15e      	bne.n	800254e <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e248      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x240>
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0x27c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x264>
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0x27c>
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2a0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01a      	beq.n	8002526 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe f844 	bl	800057c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe f840 	bl	800057c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d908      	bls.n	8002518 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e20d      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	080054c8 	.word	0x080054c8
 8002514:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002518:	4bae      	ldr	r3, [pc, #696]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0e9      	beq.n	80024f8 <HAL_RCC_OscConfig+0x28c>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe f829 	bl	800057c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe f825 	bl	800057c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1f2      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002540:	4ba4      	ldr	r3, [pc, #656]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x2c2>
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d060      	beq.n	800261e <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x302>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d119      	bne.n	800259c <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256e:	4b99      	ldr	r3, [pc, #612]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x31a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1cf      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002588:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259a:	e040      	b.n	800261e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025a6:	4b8b      	ldr	r3, [pc, #556]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fd ffe4 	bl	800057c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fd ffe0 	bl	800057c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1ad      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	497f      	ldr	r1, [pc, #508]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ec:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025ee:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fd ffc0 	bl	800057c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fd ffbc 	bl	800057c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e189      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002612:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01c      	beq.n	800266c <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002634:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fd ff9b 	bl	800057c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264a:	f7fd ff97 	bl	800057c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e164      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265c:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 800265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ef      	beq.n	800264a <HAL_RCC_OscConfig+0x3de>
 800266a:	e01b      	b.n	80026a4 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266c:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 800266e:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fd ff7e 	bl	800057c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7fd ff7a 	bl	800057c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e147      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ef      	bne.n	8002684 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a5 	beq.w	80027fc <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	; 0x58
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <HAL_RCC_OscConfig+0x56c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <HAL_RCC_OscConfig+0x56c>)
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_OscConfig+0x56c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fd ff41 	bl	800057c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fd ff3d 	bl	800057c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10a      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_OscConfig+0x56c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d108      	bne.n	8002736 <HAL_RCC_OscConfig+0x4ca>
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002734:	e024      	b.n	8002780 <HAL_RCC_OscConfig+0x514>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d110      	bne.n	8002760 <HAL_RCC_OscConfig+0x4f4>
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x514>
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d016      	beq.n	80027b6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fd fef8 	bl	800057c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fd fef4 	bl	800057c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0bf      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x568>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ed      	beq.n	8002790 <HAL_RCC_OscConfig+0x524>
 80027b4:	e019      	b.n	80027ea <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fd fee1 	bl	800057c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fd fedd 	bl	800057c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d905      	bls.n	80027dc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0a8      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e9      	bne.n	80027be <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027f2:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 808f 	beq.w	8002924 <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	f000 8089 	beq.w	8002920 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	2b02      	cmp	r3, #2
 8002814:	d156      	bne.n	80028c4 <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4a46      	ldr	r2, [pc, #280]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002818:	4b45      	ldr	r3, [pc, #276]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fd feab 	bl	800057c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fd fea7 	bl	800057c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e074      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	4b3c      	ldr	r3, [pc, #240]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4939      	ldr	r1, [pc, #228]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	3b01      	subs	r3, #1
 8002850:	011a      	lsls	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	045b      	lsls	r3, r3, #17
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	055b      	lsls	r3, r3, #21
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	065b      	lsls	r3, r3, #25
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fd fe6e 	bl	800057c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fd fe6a 	bl	800057c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e037      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x638>
 80028c2:	e02f      	b.n	8002924 <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fd fe40 	bl	800057c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fd fe3c 	bl	800057c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCC_OscConfig+0x6c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x694>
 800291e:	e001      	b.n	8002924 <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0c6      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0207 	and.w	r2, r3, #7
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d210      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4962      	ldr	r1, [pc, #392]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002958:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 0207 	bic.w	r2, r3, #7
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0ae      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d04c      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d107      	bne.n	800299c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d121      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e09c      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e090      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029bc:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e084      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e07c      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029dc:	4941      	ldr	r1, [pc, #260]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ee:	f7fd fdc5 	bl	800057c <HAL_GetTick>
 80029f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f6:	f7fd fdc1 	bl	800057c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e064      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 020c 	and.w	r2, r3, #12
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d1eb      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2a:	492e      	ldr	r1, [pc, #184]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0207 	and.w	r2, r3, #7
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 0207 	bic.w	r2, r3, #7
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_ClockConfig+0x1ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0207 	and.w	r2, r3, #7
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e034      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	491a      	ldr	r1, [pc, #104]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4913      	ldr	r1, [pc, #76]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fd fd24 	bl	8000518 <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	080054c8 	.word	0x080054c8
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x34>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d121      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d11e      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e005      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b4c:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x130>)
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	e004      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d145      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d002      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xb2>
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d00d      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0xcc>
 8002ba0:	e019      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x130>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	0a12      	lsrs	r2, r2, #8
 8002bb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
      break;
 8002bba:	e019      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002bc6:	68d2      	ldr	r2, [r2, #12]
 8002bc8:	0a12      	lsrs	r2, r2, #8
 8002bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
      break;
 8002bd4:	e00c      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	0a12      	lsrs	r2, r2, #8
 8002be4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
      break;
 8002bee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x128>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0e5b      	lsrs	r3, r3, #25
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3724      	adds	r7, #36	; 0x24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080054e0 	.word	0x080054e0
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4601      	mov	r1, r0
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	080054d8 	.word	0x080054d8

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c70:	f7ff ffda 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c74:	4601      	mov	r1, r0
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0adb      	lsrs	r3, r3, #11
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	080054d8 	.word	0x080054d8

08002c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cb0:	f7ff fa78 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002cb4:	6178      	str	r0, [r7, #20]
 8002cb6:	e014      	b.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cd0:	f7ff fa68 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce8:	d10b      	bne.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d919      	bls.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2ba0      	cmp	r3, #160	; 0xa0
 8002cf4:	d902      	bls.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e013      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e010      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d902      	bls.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d08:	2303      	movs	r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e00a      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d102      	bne.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e004      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b70      	cmp	r3, #112	; 0x70
 8002d1e:	d101      	bne.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0207 	and.w	r2, r3, #7
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40022000 	.word	0x40022000

08002d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d60:	2300      	movs	r3, #0
 8002d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d64:	2300      	movs	r3, #0
 8002d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d01c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d82:	d802      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002d88:	e01f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d94:	d01c      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002d96:	e018      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d98:	4a85      	ldr	r2, [pc, #532]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002da4:	e015      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fab9 	bl	8003324 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db6:	e00c      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3320      	adds	r3, #32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fba0 	bl	8003504 <RCCEx_PLLSAI2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd8:	4975      	ldr	r1, [pc, #468]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dda:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dee:	e001      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03f      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d01c      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0e:	d802      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e14:	e01f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e1a:	d003      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002e1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e20:	d01c      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e22:	e018      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e24:	4a62      	ldr	r2, [pc, #392]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e26:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e30:	e015      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fa73 	bl	8003324 <RCCEx_PLLSAI1_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e42:	e00c      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3320      	adds	r3, #32
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb5a 	bl	8003504 <RCCEx_PLLSAI2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e54:	e003      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	74fb      	strb	r3, [r7, #19]
      break;
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e64:	4952      	ldr	r1, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e66:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a0 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed0:	f7fd fb54 	bl	800057c <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ed6:	e009      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed8:	f7fd fb50 	bl	800057c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d902      	bls.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eea:	e005      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d15c      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01f      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d019      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fb0f 	bl	800057c <HAL_GetTick>
 8002f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	e00b      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fb0b 	bl	800057c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d902      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	74fb      	strb	r3, [r7, #19]
            break;
 8002f78:	e006      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ec      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fa6:	e009      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
 8002fac:	e006      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fbc:	7c7b      	ldrb	r3, [r7, #17]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4a9e      	ldr	r2, [pc, #632]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc4:	4b9d      	ldr	r3, [pc, #628]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fda:	4998      	ldr	r1, [pc, #608]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fdc:	4b97      	ldr	r3, [pc, #604]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 0203 	bic.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ffc:	498f      	ldr	r1, [pc, #572]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ffe:	4b8f      	ldr	r3, [pc, #572]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f023 020c 	bic.w	r2, r3, #12
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301e:	4987      	ldr	r1, [pc, #540]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003020:	4b86      	ldr	r3, [pc, #536]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003040:	497e      	ldr	r1, [pc, #504]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003042:	4b7e      	ldr	r3, [pc, #504]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003062:	4976      	ldr	r1, [pc, #472]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003084:	496d      	ldr	r1, [pc, #436]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003086:	4b6d      	ldr	r3, [pc, #436]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a6:	4965      	ldr	r1, [pc, #404]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c8:	495c      	ldr	r1, [pc, #368]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ca:	4b5c      	ldr	r3, [pc, #368]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ea:	4954      	ldr	r1, [pc, #336]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800310c:	494b      	ldr	r1, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800312e:	4943      	ldr	r1, [pc, #268]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d028      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003152:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316e:	d106      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003170:	4a32      	ldr	r2, [pc, #200]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800317a:	60d3      	str	r3, [r2, #12]
 800317c:	e011      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003186:	d10c      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f8c8 	bl	8003324 <RCCEx_PLLSAI1_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031ae:	4923      	ldr	r1, [pc, #140]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d106      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d8:	60d3      	str	r3, [r2, #12]
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f899 	bl	8003324 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02b      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800320c:	490b      	ldr	r1, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322a:	d109      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322c:	4a03      	ldr	r2, [pc, #12]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800322e:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003236:	60d3      	str	r3, [r2, #12]
 8003238:	e014      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003248:	d10c      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f867 	bl	8003324 <RCCEx_PLLSAI1_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003270:	492b      	ldr	r1, [pc, #172]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328e:	d10d      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f844 	bl	8003324 <RCCEx_PLLSAI1_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d014      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	74bb      	strb	r3, [r7, #18]
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3320      	adds	r3, #32
 80032ba:	2102      	movs	r1, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f921 	bl	8003504 <RCCEx_PLLSAI2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032dc:	4910      	ldr	r1, [pc, #64]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003316:	7cbb      	ldrb	r3, [r7, #18]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000

08003324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d018      	beq.n	8003370 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0203 	and.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d10d      	bne.n	800336a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
       ||
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
       ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d044      	beq.n	80033f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e041      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d00c      	beq.n	8003392 <RCCEx_PLLSAI1_Config+0x6e>
 8003378:	2b03      	cmp	r3, #3
 800337a:	d013      	beq.n	80033a4 <RCCEx_PLLSAI1_Config+0x80>
 800337c:	2b01      	cmp	r3, #1
 800337e:	d120      	bne.n	80033c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003380:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11d      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e01a      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a2:	e013      	b.n	80033cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033a4:	4b56      	ldr	r3, [pc, #344]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033c0:	e006      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
      break;
 80033c6:	e004      	b.n	80033d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033c8:	bf00      	nop
 80033ca:	e002      	b.n	80033d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033d8:	4849      	ldr	r0, [pc, #292]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	430b      	orrs	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d17d      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033fa:	4a41      	ldr	r2, [pc, #260]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003406:	f7fd f8b9 	bl	800057c <HAL_GetTick>
 800340a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800340c:	e009      	b.n	8003422 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800340e:	f7fd f8b5 	bl	800057c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d902      	bls.n	8003422 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	73fb      	strb	r3, [r7, #15]
        break;
 8003420:	e005      	b.n	800342e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d160      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d111      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800343a:	4831      	ldr	r0, [pc, #196]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	0211      	lsls	r1, r2, #8
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68d2      	ldr	r2, [r2, #12]
 8003452:	0912      	lsrs	r2, r2, #4
 8003454:	0452      	lsls	r2, r2, #17
 8003456:	430a      	orrs	r2, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	6103      	str	r3, [r0, #16]
 800345c:	e027      	b.n	80034ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d112      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003464:	4826      	ldr	r0, [pc, #152]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800346e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	0211      	lsls	r1, r2, #8
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6912      	ldr	r2, [r2, #16]
 800347c:	0852      	lsrs	r2, r2, #1
 800347e:	3a01      	subs	r2, #1
 8003480:	0552      	lsls	r2, r2, #21
 8003482:	430a      	orrs	r2, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	6103      	str	r3, [r0, #16]
 8003488:	e011      	b.n	80034ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800348a:	481d      	ldr	r0, [pc, #116]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003494:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	0211      	lsls	r1, r2, #8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6952      	ldr	r2, [r2, #20]
 80034a2:	0852      	lsrs	r2, r2, #1
 80034a4:	3a01      	subs	r2, #1
 80034a6:	0652      	lsls	r2, r2, #25
 80034a8:	430a      	orrs	r2, r1
 80034aa:	4313      	orrs	r3, r2
 80034ac:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ae:	4a14      	ldr	r2, [pc, #80]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd f85f 	bl	800057c <HAL_GetTick>
 80034be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034c0:	e009      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c2:	f7fd f85b 	bl	800057c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d902      	bls.n	80034d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	73fb      	strb	r3, [r7, #15]
          break;
 80034d4:	e005      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ef      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034e8:	4905      	ldr	r1, [pc, #20]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003512:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
       ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003536:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
       ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d044      	beq.n	80035d4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e041      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d00c      	beq.n	8003572 <RCCEx_PLLSAI2_Config+0x6e>
 8003558:	2b03      	cmp	r3, #3
 800355a:	d013      	beq.n	8003584 <RCCEx_PLLSAI2_Config+0x80>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d120      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003560:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e01a      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003572:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003582:	e013      	b.n	80035ac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003584:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a0:	e006      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e004      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035a8:	bf00      	nop
 80035aa:	e002      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035b8:	483e      	ldr	r0, [pc, #248]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	430b      	orrs	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d167      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035da:	4a36      	ldr	r2, [pc, #216]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e6:	f7fc ffc9 	bl	800057c <HAL_GetTick>
 80035ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ec:	e009      	b.n	8003602 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ee:	f7fc ffc5 	bl	800057c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d902      	bls.n	8003602 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003600:	e005      	b.n	800360e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d14a      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d111      	bne.n	800363e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800361a:	4826      	ldr	r0, [pc, #152]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	0211      	lsls	r1, r2, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	0912      	lsrs	r2, r2, #4
 8003634:	0452      	lsls	r2, r2, #17
 8003636:	430a      	orrs	r2, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	6143      	str	r3, [r0, #20]
 800363c:	e011      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800363e:	481d      	ldr	r0, [pc, #116]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003640:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003648:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	0211      	lsls	r1, r2, #8
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6912      	ldr	r2, [r2, #16]
 8003656:	0852      	lsrs	r2, r2, #1
 8003658:	3a01      	subs	r2, #1
 800365a:	0652      	lsls	r2, r2, #25
 800365c:	430a      	orrs	r2, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fc ff85 	bl	800057c <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003674:	e009      	b.n	800368a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003676:	f7fc ff81 	bl	800057c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d902      	bls.n	800368a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	73fb      	strb	r3, [r7, #15]
          break;
 8003688:	e005      	b.n	8003696 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ef      	beq.n	8003676 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800369c:	4905      	ldr	r1, [pc, #20]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e01d      	b.n	8003706 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f001 fdba 	bl	8005258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 f922 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003726:	2302      	movs	r3, #2
 8003728:	e105      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x226>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b14      	cmp	r3, #20
 800373e:	f200 80f0 	bhi.w	8003922 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800379d 	.word	0x0800379d
 800374c:	08003923 	.word	0x08003923
 8003750:	08003923 	.word	0x08003923
 8003754:	08003923 	.word	0x08003923
 8003758:	080037dd 	.word	0x080037dd
 800375c:	08003923 	.word	0x08003923
 8003760:	08003923 	.word	0x08003923
 8003764:	08003923 	.word	0x08003923
 8003768:	0800381f 	.word	0x0800381f
 800376c:	08003923 	.word	0x08003923
 8003770:	08003923 	.word	0x08003923
 8003774:	08003923 	.word	0x08003923
 8003778:	0800385f 	.word	0x0800385f
 800377c:	08003923 	.word	0x08003923
 8003780:	08003923 	.word	0x08003923
 8003784:	08003923 	.word	0x08003923
 8003788:	080038a1 	.word	0x080038a1
 800378c:	08003923 	.word	0x08003923
 8003790:	08003923 	.word	0x08003923
 8003794:	08003923 	.word	0x08003923
 8003798:	080038e1 	.word	0x080038e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f966 	bl	8003a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	6992      	ldr	r2, [r2, #24]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	6992      	ldr	r2, [r2, #24]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	6991      	ldr	r1, [r2, #24]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	6912      	ldr	r2, [r2, #16]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
      break;
 80037da:	e0a3      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f9d6 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	6992      	ldr	r2, [r2, #24]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	6992      	ldr	r2, [r2, #24]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	6991      	ldr	r1, [r2, #24]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	6912      	ldr	r2, [r2, #16]
 8003816:	0212      	lsls	r2, r2, #8
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
      break;
 800381c:	e082      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fa3f 	bl	8003ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	69d2      	ldr	r2, [r2, #28]
 8003834:	f042 0208 	orr.w	r2, r2, #8
 8003838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	69d2      	ldr	r2, [r2, #28]
 8003844:	f022 0204 	bic.w	r2, r2, #4
 8003848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	69d1      	ldr	r1, [r2, #28]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
      break;
 800385c:	e062      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 faa7 	bl	8003db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	69d2      	ldr	r2, [r2, #28]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	69d2      	ldr	r2, [r2, #28]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	69d1      	ldr	r1, [r2, #28]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	6912      	ldr	r2, [r2, #16]
 8003898:	0212      	lsls	r2, r2, #8
 800389a:	430a      	orrs	r2, r1
 800389c:	61da      	str	r2, [r3, #28]
      break;
 800389e:	e041      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 faf0 	bl	8003e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038b6:	f042 0208 	orr.w	r2, r2, #8
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038c6:	f022 0204 	bic.w	r2, r2, #4
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	6912      	ldr	r2, [r2, #16]
 80038da:	430a      	orrs	r2, r1
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038de:	e021      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fb34 	bl	8003f54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	6912      	ldr	r2, [r2, #16]
 800391a:	0212      	lsls	r2, r2, #8
 800391c:	430a      	orrs	r2, r1
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003920:	e000      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003922:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d01b      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d017      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40013400 	.word	0x40013400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0302 	bic.w	r3, r3, #2
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_OC1_SetConfig+0x10c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00f      	beq.n	8003af4 <TIM_OC1_SetConfig+0x80>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_OC1_SetConfig+0x110>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_OC1_SetConfig+0x80>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_OC1_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_OC1_SetConfig+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_OC1_SetConfig+0x118>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC1_SetConfig+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <TIM_OC1_SetConfig+0x11c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0308 	bic.w	r3, r3, #8
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <TIM_OC1_SetConfig+0x10c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_OC1_SetConfig+0xc2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1a      	ldr	r2, [pc, #104]	; (8003b84 <TIM_OC1_SetConfig+0x110>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_OC1_SetConfig+0xc2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <TIM_OC1_SetConfig+0x114>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_OC1_SetConfig+0xc2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_OC1_SetConfig+0x118>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC1_SetConfig+0xc2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC1_SetConfig+0x11c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40013400 	.word	0x40013400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0210 	bic.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <TIM_OC2_SetConfig+0x100>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC2_SetConfig+0x6c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <TIM_OC2_SetConfig+0x104>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <TIM_OC2_SetConfig+0x100>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00f      	beq.n	8003c44 <TIM_OC2_SetConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <TIM_OC2_SetConfig+0x104>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_OC2_SetConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <TIM_OC2_SetConfig+0x108>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_OC2_SetConfig+0xb0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <TIM_OC2_SetConfig+0x10c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC2_SetConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <TIM_OC2_SetConfig+0x110>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <TIM_OC3_SetConfig+0xfc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC3_SetConfig+0x6a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <TIM_OC3_SetConfig+0x100>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10d      	bne.n	8003d2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <TIM_OC3_SetConfig+0xfc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00f      	beq.n	8003d56 <TIM_OC3_SetConfig+0xae>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <TIM_OC3_SetConfig+0x100>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_OC3_SetConfig+0xae>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <TIM_OC3_SetConfig+0x104>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_OC3_SetConfig+0xae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <TIM_OC3_SetConfig+0x108>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_OC3_SetConfig+0xae>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <TIM_OC3_SetConfig+0x10c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d113      	bne.n	8003d7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	031b      	lsls	r3, r3, #12
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <TIM_OC4_SetConfig+0xc0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00f      	beq.n	8003e3c <TIM_OC4_SetConfig+0x84>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <TIM_OC4_SetConfig+0xc4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <TIM_OC4_SetConfig+0x84>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <TIM_OC4_SetConfig+0xc8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <TIM_OC4_SetConfig+0x84>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <TIM_OC4_SetConfig+0xcc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC4_SetConfig+0x84>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <TIM_OC4_SetConfig+0xd0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d109      	bne.n	8003e50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <TIM_OC5_SetConfig+0xb4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <TIM_OC5_SetConfig+0xb8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <TIM_OC5_SetConfig+0xbc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC5_SetConfig+0xc0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC5_SetConfig+0x7a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <TIM_OC5_SetConfig+0xc4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d109      	bne.n	8003f1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800

08003f54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <TIM_OC6_SetConfig+0xb8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <TIM_OC6_SetConfig+0xbc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a16      	ldr	r2, [pc, #88]	; (8004014 <TIM_OC6_SetConfig+0xc0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <TIM_OC6_SetConfig+0xc4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC6_SetConfig+0x7c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC6_SetConfig+0xc8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d109      	bne.n	8003fe4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004034:	2302      	movs	r3, #2
 8004036:	e045      	b.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004072:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004096:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40013400 	.word	0x40013400

080040d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e065      	b.n	80041c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d115      	bne.n	80041ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	051b      	lsls	r3, r3, #20
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400

080041d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e043      	b.n	800426e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 f86e 	bl	80052dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f82d 	bl	8004278 <UART_SetConfig>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e022      	b.n	800426e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb5f 	bl	80048f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6852      	ldr	r2, [r2, #4]
 8004240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004244:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004254:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fbe6 	bl	8004a38 <UART_CheckIdleState>
 800426c:	4603      	mov	r3, r0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004286:	2310      	movs	r3, #16
 8004288:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800428a:	2300      	movs	r3, #0
 800428c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	4baa      	ldr	r3, [pc, #680]	; (8004568 <UART_SetConfig+0x2f0>)
 80042be:	400b      	ands	r3, r1
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68d2      	ldr	r2, [r2, #12]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4aa1      	ldr	r2, [pc, #644]	; (800456c <UART_SetConfig+0x2f4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a98      	ldr	r2, [pc, #608]	; (8004570 <UART_SetConfig+0x2f8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d121      	bne.n	8004358 <UART_SetConfig+0xe0>
 8004314:	4b97      	ldr	r3, [pc, #604]	; (8004574 <UART_SetConfig+0x2fc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b03      	cmp	r3, #3
 8004320:	d816      	bhi.n	8004350 <UART_SetConfig+0xd8>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0xb0>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	08004339 	.word	0x08004339
 800432c:	08004345 	.word	0x08004345
 8004330:	0800433f 	.word	0x0800433f
 8004334:	0800434b 	.word	0x0800434b
 8004338:	2301      	movs	r3, #1
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e0e4      	b.n	8004508 <UART_SetConfig+0x290>
 800433e:	2302      	movs	r3, #2
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e0e1      	b.n	8004508 <UART_SetConfig+0x290>
 8004344:	2304      	movs	r3, #4
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e0de      	b.n	8004508 <UART_SetConfig+0x290>
 800434a:	2308      	movs	r3, #8
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e0db      	b.n	8004508 <UART_SetConfig+0x290>
 8004350:	2310      	movs	r3, #16
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	bf00      	nop
 8004356:	e0d7      	b.n	8004508 <UART_SetConfig+0x290>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a86      	ldr	r2, [pc, #536]	; (8004578 <UART_SetConfig+0x300>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d134      	bne.n	80043cc <UART_SetConfig+0x154>
 8004362:	4b84      	ldr	r3, [pc, #528]	; (8004574 <UART_SetConfig+0x2fc>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d829      	bhi.n	80043c4 <UART_SetConfig+0x14c>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x100>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043b3 	.word	0x080043b3
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	080043bf 	.word	0x080043bf
 80043ac:	2300      	movs	r3, #0
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e0aa      	b.n	8004508 <UART_SetConfig+0x290>
 80043b2:	2302      	movs	r3, #2
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e0a7      	b.n	8004508 <UART_SetConfig+0x290>
 80043b8:	2304      	movs	r3, #4
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e0a4      	b.n	8004508 <UART_SetConfig+0x290>
 80043be:	2308      	movs	r3, #8
 80043c0:	76fb      	strb	r3, [r7, #27]
 80043c2:	e0a1      	b.n	8004508 <UART_SetConfig+0x290>
 80043c4:	2310      	movs	r3, #16
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	bf00      	nop
 80043ca:	e09d      	b.n	8004508 <UART_SetConfig+0x290>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6a      	ldr	r2, [pc, #424]	; (800457c <UART_SetConfig+0x304>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d120      	bne.n	8004418 <UART_SetConfig+0x1a0>
 80043d6:	4b67      	ldr	r3, [pc, #412]	; (8004574 <UART_SetConfig+0x2fc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d00f      	beq.n	8004404 <UART_SetConfig+0x18c>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d802      	bhi.n	80043ee <UART_SetConfig+0x176>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <UART_SetConfig+0x180>
 80043ec:	e010      	b.n	8004410 <UART_SetConfig+0x198>
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d005      	beq.n	80043fe <UART_SetConfig+0x186>
 80043f2:	2b30      	cmp	r3, #48	; 0x30
 80043f4:	d009      	beq.n	800440a <UART_SetConfig+0x192>
 80043f6:	e00b      	b.n	8004410 <UART_SetConfig+0x198>
 80043f8:	2300      	movs	r3, #0
 80043fa:	76fb      	strb	r3, [r7, #27]
 80043fc:	e084      	b.n	8004508 <UART_SetConfig+0x290>
 80043fe:	2302      	movs	r3, #2
 8004400:	76fb      	strb	r3, [r7, #27]
 8004402:	e081      	b.n	8004508 <UART_SetConfig+0x290>
 8004404:	2304      	movs	r3, #4
 8004406:	76fb      	strb	r3, [r7, #27]
 8004408:	e07e      	b.n	8004508 <UART_SetConfig+0x290>
 800440a:	2308      	movs	r3, #8
 800440c:	76fb      	strb	r3, [r7, #27]
 800440e:	e07b      	b.n	8004508 <UART_SetConfig+0x290>
 8004410:	2310      	movs	r3, #16
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	bf00      	nop
 8004416:	e077      	b.n	8004508 <UART_SetConfig+0x290>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <UART_SetConfig+0x308>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d120      	bne.n	8004464 <UART_SetConfig+0x1ec>
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <UART_SetConfig+0x2fc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d00f      	beq.n	8004450 <UART_SetConfig+0x1d8>
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d802      	bhi.n	800443a <UART_SetConfig+0x1c2>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <UART_SetConfig+0x1cc>
 8004438:	e010      	b.n	800445c <UART_SetConfig+0x1e4>
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d005      	beq.n	800444a <UART_SetConfig+0x1d2>
 800443e:	2bc0      	cmp	r3, #192	; 0xc0
 8004440:	d009      	beq.n	8004456 <UART_SetConfig+0x1de>
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x1e4>
 8004444:	2300      	movs	r3, #0
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e05e      	b.n	8004508 <UART_SetConfig+0x290>
 800444a:	2302      	movs	r3, #2
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e05b      	b.n	8004508 <UART_SetConfig+0x290>
 8004450:	2304      	movs	r3, #4
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	e058      	b.n	8004508 <UART_SetConfig+0x290>
 8004456:	2308      	movs	r3, #8
 8004458:	76fb      	strb	r3, [r7, #27]
 800445a:	e055      	b.n	8004508 <UART_SetConfig+0x290>
 800445c:	2310      	movs	r3, #16
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	bf00      	nop
 8004462:	e051      	b.n	8004508 <UART_SetConfig+0x290>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a46      	ldr	r2, [pc, #280]	; (8004584 <UART_SetConfig+0x30c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d124      	bne.n	80044b8 <UART_SetConfig+0x240>
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <UART_SetConfig+0x2fc>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d012      	beq.n	80044a4 <UART_SetConfig+0x22c>
 800447e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004482:	d802      	bhi.n	800448a <UART_SetConfig+0x212>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <UART_SetConfig+0x220>
 8004488:	e012      	b.n	80044b0 <UART_SetConfig+0x238>
 800448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448e:	d006      	beq.n	800449e <UART_SetConfig+0x226>
 8004490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004494:	d009      	beq.n	80044aa <UART_SetConfig+0x232>
 8004496:	e00b      	b.n	80044b0 <UART_SetConfig+0x238>
 8004498:	2300      	movs	r3, #0
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e034      	b.n	8004508 <UART_SetConfig+0x290>
 800449e:	2302      	movs	r3, #2
 80044a0:	76fb      	strb	r3, [r7, #27]
 80044a2:	e031      	b.n	8004508 <UART_SetConfig+0x290>
 80044a4:	2304      	movs	r3, #4
 80044a6:	76fb      	strb	r3, [r7, #27]
 80044a8:	e02e      	b.n	8004508 <UART_SetConfig+0x290>
 80044aa:	2308      	movs	r3, #8
 80044ac:	76fb      	strb	r3, [r7, #27]
 80044ae:	e02b      	b.n	8004508 <UART_SetConfig+0x290>
 80044b0:	2310      	movs	r3, #16
 80044b2:	76fb      	strb	r3, [r7, #27]
 80044b4:	bf00      	nop
 80044b6:	e027      	b.n	8004508 <UART_SetConfig+0x290>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2b      	ldr	r2, [pc, #172]	; (800456c <UART_SetConfig+0x2f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d123      	bne.n	800450a <UART_SetConfig+0x292>
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <UART_SetConfig+0x2fc>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d012      	beq.n	80044f8 <UART_SetConfig+0x280>
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d802      	bhi.n	80044de <UART_SetConfig+0x266>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <UART_SetConfig+0x274>
 80044dc:	e012      	b.n	8004504 <UART_SetConfig+0x28c>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d006      	beq.n	80044f2 <UART_SetConfig+0x27a>
 80044e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e8:	d009      	beq.n	80044fe <UART_SetConfig+0x286>
 80044ea:	e00b      	b.n	8004504 <UART_SetConfig+0x28c>
 80044ec:	2300      	movs	r3, #0
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	e00a      	b.n	8004508 <UART_SetConfig+0x290>
 80044f2:	2302      	movs	r3, #2
 80044f4:	76fb      	strb	r3, [r7, #27]
 80044f6:	e007      	b.n	8004508 <UART_SetConfig+0x290>
 80044f8:	2304      	movs	r3, #4
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	e004      	b.n	8004508 <UART_SetConfig+0x290>
 80044fe:	2308      	movs	r3, #8
 8004500:	76fb      	strb	r3, [r7, #27]
 8004502:	e001      	b.n	8004508 <UART_SetConfig+0x290>
 8004504:	2310      	movs	r3, #16
 8004506:	76fb      	strb	r3, [r7, #27]
 8004508:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <UART_SetConfig+0x2f4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	f040 80ee 	bne.w	80046f2 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004516:	7efb      	ldrb	r3, [r7, #27]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d837      	bhi.n	800458c <UART_SetConfig+0x314>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x2ac>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004549 	.word	0x08004549
 8004528:	0800458d 	.word	0x0800458d
 800452c:	08004551 	.word	0x08004551
 8004530:	0800458d 	.word	0x0800458d
 8004534:	08004557 	.word	0x08004557
 8004538:	0800458d 	.word	0x0800458d
 800453c:	0800458d 	.word	0x0800458d
 8004540:	0800458d 	.word	0x0800458d
 8004544:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004548:	f7fe fb7a 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 800454c:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800454e:	e020      	b.n	8004592 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <UART_SetConfig+0x310>)
 8004552:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8004554:	e01d      	b.n	8004592 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe facb 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 800455a:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800455c:	e019      	b.n	8004592 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8004564:	e015      	b.n	8004592 <UART_SetConfig+0x31a>
 8004566:	bf00      	nop
 8004568:	efff69f3 	.word	0xefff69f3
 800456c:	40008000 	.word	0x40008000
 8004570:	40013800 	.word	0x40013800
 8004574:	40021000 	.word	0x40021000
 8004578:	40004400 	.word	0x40004400
 800457c:	40004800 	.word	0x40004800
 8004580:	40004c00 	.word	0x40004c00
 8004584:	40005000 	.word	0x40005000
 8004588:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	74fb      	strb	r3, [r7, #19]
        break;
 8004590:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 819e 	beq.w	80048d6 <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d805      	bhi.n	80045b6 <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d202      	bcs.n	80045bc <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	74fb      	strb	r3, [r7, #19]
 80045ba:	e18c      	b.n	80048d6 <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	f200 8084 	bhi.w	80046cc <UART_SetConfig+0x454>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x354>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080046cd 	.word	0x080046cd
 80045d4:	08004631 	.word	0x08004631
 80045d8:	080046cd 	.word	0x080046cd
 80045dc:	08004665 	.word	0x08004665
 80045e0:	080046cd 	.word	0x080046cd
 80045e4:	080046cd 	.word	0x080046cd
 80045e8:	080046cd 	.word	0x080046cd
 80045ec:	080046a3 	.word	0x080046a3
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045f0:	f7fe fb26 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f04f 0400 	mov.w	r4, #0
 80045fa:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80045fe:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004602:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	eb18 0003 	adds.w	r0, r8, r3
 8004614:	eb49 0104 	adc.w	r1, r9, r4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f04f 0400 	mov.w	r4, #0
 8004620:	461a      	mov	r2, r3
 8004622:	4623      	mov	r3, r4
 8004624:	f7fb fdd0 	bl	80001c8 <__aeabi_uldivmod>
 8004628:	4603      	mov	r3, r0
 800462a:	460c      	mov	r4, r1
 800462c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800462e:	e050      	b.n	80046d2 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	f04f 0400 	mov.w	r4, #0
 800463a:	49ad      	ldr	r1, [pc, #692]	; (80048f0 <UART_SetConfig+0x678>)
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	eb13 0801 	adds.w	r8, r3, r1
 8004644:	eb44 0902 	adc.w	r9, r4, r2
 8004648:	4640      	mov	r0, r8
 800464a:	4649      	mov	r1, r9
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	461a      	mov	r2, r3
 8004656:	4623      	mov	r3, r4
 8004658:	f7fb fdb6 	bl	80001c8 <__aeabi_uldivmod>
 800465c:	4603      	mov	r3, r0
 800465e:	460c      	mov	r4, r1
 8004660:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004662:	e036      	b.n	80046d2 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004664:	f7fe fa44 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	021d      	lsls	r5, r3, #8
 8004672:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8004676:	0214      	lsls	r4, r2, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	461a      	mov	r2, r3
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	18a0      	adds	r0, r4, r2
 8004686:	eb45 0103 	adc.w	r1, r5, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	461a      	mov	r2, r3
 8004694:	4623      	mov	r3, r4
 8004696:	f7fb fd97 	bl	80001c8 <__aeabi_uldivmod>
 800469a:	4603      	mov	r3, r0
 800469c:	460c      	mov	r4, r1
 800469e:	617b      	str	r3, [r7, #20]
#endif
            break;
 80046a0:	e017      	b.n	80046d2 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	f04f 0400 	mov.w	r4, #0
 80046ac:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80046b0:	f144 0100 	adc.w	r1, r4, #0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	461a      	mov	r2, r3
 80046be:	4623      	mov	r3, r4
 80046c0:	f7fb fd82 	bl	80001c8 <__aeabi_uldivmod>
 80046c4:	4603      	mov	r3, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	617b      	str	r3, [r7, #20]
#endif
            break;
 80046ca:	e002      	b.n	80046d2 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	74fb      	strb	r3, [r7, #19]
            break;
 80046d0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d8:	d308      	bcc.n	80046ec <UART_SetConfig+0x474>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e0:	d204      	bcs.n	80046ec <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e0f4      	b.n	80048d6 <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	74fb      	strb	r3, [r7, #19]
 80046f0:	e0f1      	b.n	80048d6 <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d17e      	bne.n	80047fa <UART_SetConfig+0x582>
  {
    switch (clocksource)
 80046fc:	7efb      	ldrb	r3, [r7, #27]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d85b      	bhi.n	80047ba <UART_SetConfig+0x542>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0x490>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	0800472d 	.word	0x0800472d
 800470c:	0800474b 	.word	0x0800474b
 8004710:	08004769 	.word	0x08004769
 8004714:	080047bb 	.word	0x080047bb
 8004718:	08004785 	.word	0x08004785
 800471c:	080047bb 	.word	0x080047bb
 8004720:	080047bb 	.word	0x080047bb
 8004724:	080047bb 	.word	0x080047bb
 8004728:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800472c:	f7fe fa88 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004730:	4603      	mov	r3, r0
 8004732:	005a      	lsls	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004748:	e03a      	b.n	80047c0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800474a:	f7fe fa8f 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 800474e:	4603      	mov	r3, r0
 8004750:	005a      	lsls	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	b29b      	uxth	r3, r3
 8004764:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004766:	e02b      	b.n	80047c0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004772:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6852      	ldr	r2, [r2, #4]
 800477a:	fbb3 f3f2 	udiv	r3, r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004782:	e01d      	b.n	80047c0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004784:	f7fe f9b4 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004788:	4603      	mov	r3, r0
 800478a:	005a      	lsls	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	441a      	add	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	b29b      	uxth	r3, r3
 800479e:	617b      	str	r3, [r7, #20]
#endif
        break;
 80047a0:	e00e      	b.n	80047c0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	617b      	str	r3, [r7, #20]
#endif
        break;
 80047b8:	e002      	b.n	80047c0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	74fb      	strb	r3, [r7, #19]
        break;
 80047be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d916      	bls.n	80047f4 <UART_SetConfig+0x57c>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d212      	bcs.n	80047f4 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f023 030f 	bic.w	r3, r3, #15
 80047d6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	897b      	ldrh	r3, [r7, #10]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	897a      	ldrh	r2, [r7, #10]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e070      	b.n	80048d6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	74fb      	strb	r3, [r7, #19]
 80047f8:	e06d      	b.n	80048d6 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 80047fa:	7efb      	ldrb	r3, [r7, #27]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d859      	bhi.n	80048b4 <UART_SetConfig+0x63c>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x590>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004849 	.word	0x08004849
 8004810:	08004865 	.word	0x08004865
 8004814:	080048b5 	.word	0x080048b5
 8004818:	08004881 	.word	0x08004881
 800481c:	080048b5 	.word	0x080048b5
 8004820:	080048b5 	.word	0x080048b5
 8004824:	080048b5 	.word	0x080048b5
 8004828:	0800489d 	.word	0x0800489d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800482c:	f7fe fa08 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004846:	e038      	b.n	80048ba <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004848:	f7fe fa10 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 800484c:	4602      	mov	r2, r0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	617b      	str	r3, [r7, #20]
#endif
        break;
 8004862:	e02a      	b.n	80048ba <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800486e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6852      	ldr	r2, [r2, #4]
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800487e:	e01c      	b.n	80048ba <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004880:	f7fe f936 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	617b      	str	r3, [r7, #20]
#endif
        break;
 800489a:	e00e      	b.n	80048ba <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80048b2:	e002      	b.n	80048ba <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	74fb      	strb	r3, [r7, #19]
        break;
 80048b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b0f      	cmp	r3, #15
 80048be:	d908      	bls.n	80048d2 <UART_SetConfig+0x65a>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c6:	d204      	bcs.n	80048d2 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e001      	b.n	80048d6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048ee:	bf00      	nop
 80048f0:	f4240000 	.word	0xf4240000

080048f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	6852      	ldr	r2, [r2, #4]
 8004912:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	6852      	ldr	r2, [r2, #4]
 8004934:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	6852      	ldr	r2, [r2, #4]
 8004956:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	6852      	ldr	r2, [r2, #4]
 8004978:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	6892      	ldr	r2, [r2, #8]
 800499a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	6852      	ldr	r2, [r2, #4]
 80049de:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f2:	d10a      	bne.n	8004a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	6852      	ldr	r2, [r2, #4]
 80049fe:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6852      	ldr	r2, [r2, #4]
 8004a20:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a4a:	f7fb fd97 	bl	800057c <HAL_GetTick>
 8004a4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d10e      	bne.n	8004a7c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f82c 	bl	8004aca <UART_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e022      	b.n	8004ac2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d10e      	bne.n	8004aa8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f816 	bl	8004aca <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e00c      	b.n	8004ac2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ada:	e02c      	b.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d028      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0x30>
 8004aea:	f7fb fd47 	bl	800057c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad2      	subs	r2, r2, r3
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d91d      	bls.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b08:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	6892      	ldr	r2, [r2, #8]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e00f      	b.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	401a      	ands	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d0c3      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b64:	f7fb fcb8 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b68:	f000 f844 	bl	8004bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b6c:	f000 fa30 	bl	8004fd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004b70:	f000 f9fa 	bl	8004f68 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8004b74:	f000 f8d0 	bl	8004d18 <MX_ADC3_Init>
  MX_TIM8_Init();
 8004b78:	f000 f972 	bl	8004e60 <MX_TIM8_Init>
  MX_DAC1_Init();
 8004b7c:	f000 f93c 	bl	8004df8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8004b80:	217f      	movs	r1, #127	; 0x7f
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <main+0x80>)
 8004b84:	f7fc fe26 	bl	80017d4 <HAL_ADCEx_Calibration_Start>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <main+0x36>
  {
    /* Calibration Error */
    Error_Handler();
 8004b8e:	217a      	movs	r1, #122	; 0x7a
 8004b90:	4814      	ldr	r0, [pc, #80]	; (8004be4 <main+0x84>)
 8004b92:	f000 fab7 	bl	8005104 <_Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get ADC value (wait for EOC to return)
	  uhADCxConvertedValue = ADC3_Get_Value(&hadc3);
 8004b96:	4812      	ldr	r0, [pc, #72]	; (8004be0 <main+0x80>)
 8004b98:	f000 fa64 	bl	8005064 <ADC3_Get_Value>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <main+0x88>)
 8004ba2:	801a      	strh	r2, [r3, #0]
	  // Set uhADCxConvertedValue as DAC level
	  DAC1_Set_Value(&hdac1, DAC_CHANNEL, uhADCxConvertedValue);
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <main+0x88>)
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	2110      	movs	r1, #16
 8004bae:	480f      	ldr	r0, [pc, #60]	; (8004bec <main+0x8c>)
 8004bb0:	f000 fa82 	bl	80050b8 <DAC1_Set_Value>

	  if(uhADCxConvertedValue >= (0xffff/2)){
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <main+0x88>)
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d906      	bls.n	8004bd0 <main+0x70>
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bc8:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <main+0x90>)
 8004bca:	f7fd fad3 	bl	8002174 <HAL_GPIO_WritePin>
 8004bce:	e7e2      	b.n	8004b96 <main+0x36>
	  }else{
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bd6:	4806      	ldr	r0, [pc, #24]	; (8004bf0 <main+0x90>)
 8004bd8:	f7fd facc 	bl	8002174 <HAL_GPIO_WritePin>
	  uhADCxConvertedValue = ADC3_Get_Value(&hadc3);
 8004bdc:	e7db      	b.n	8004b96 <main+0x36>
 8004bde:	bf00      	nop
 8004be0:	2000007c 	.word	0x2000007c
 8004be4:	080054b8 	.word	0x080054b8
 8004be8:	20000020 	.word	0x20000020
 8004bec:	20000068 	.word	0x20000068
 8004bf0:	48000800 	.word	0x48000800

08004bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0b8      	sub	sp, #224	; 0xe0
 8004bf8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004c20:	230a      	movs	r3, #10
 8004c22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004c26:	2307      	movs	r3, #7
 8004c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c32:	2302      	movs	r3, #2
 8004c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fd fb15 	bl	800226c <HAL_RCC_OscConfig>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c48:	21b1      	movs	r1, #177	; 0xb1
 8004c4a:	4831      	ldr	r0, [pc, #196]	; (8004d10 <SystemClock_Config+0x11c>)
 8004c4c:	f000 fa5a 	bl	8005104 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c50:	230f      	movs	r3, #15
 8004c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c56:	2303      	movs	r3, #3
 8004c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c72:	2104      	movs	r1, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd fe5d 	bl	8002934 <HAL_RCC_ClockConfig>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c80:	21bf      	movs	r1, #191	; 0xbf
 8004c82:	4823      	ldr	r0, [pc, #140]	; (8004d10 <SystemClock_Config+0x11c>)
 8004c84:	f000 fa3e 	bl	8005104 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8004c88:	f244 0302 	movw	r3, #16386	; 0x4002
 8004c8c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004c92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c96:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004cac:	2302      	movs	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe f84d 	bl	8002d58 <HAL_RCCEx_PeriphCLKConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004cc4:	21ce      	movs	r1, #206	; 0xce
 8004cc6:	4812      	ldr	r0, [pc, #72]	; (8004d10 <SystemClock_Config+0x11c>)
 8004cc8:	f000 fa1c 	bl	8005104 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004cd0:	f7fd fa76 	bl	80021c0 <HAL_PWREx_ControlVoltageScaling>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <SystemClock_Config+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004cda:	21d5      	movs	r1, #213	; 0xd5
 8004cdc:	480c      	ldr	r0, [pc, #48]	; (8004d10 <SystemClock_Config+0x11c>)
 8004cde:	f000 fa11 	bl	8005104 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004ce2:	f7fd ffa1 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <SystemClock_Config+0x120>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc feb2 	bl	8001a5a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004cf6:	2004      	movs	r0, #4
 8004cf8:	f7fc febc 	bl	8001a74 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	f7fc fe8d 	bl	8001a22 <HAL_NVIC_SetPriority>
}
 8004d08:	bf00      	nop
 8004d0a:	37e0      	adds	r7, #224	; 0xe0
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	080054b8 	.word	0x080054b8
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8004d1e:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d20:	4a32      	ldr	r2, [pc, #200]	; (8004dec <MX_ADC3_Init+0xd4>)
 8004d22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d30:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d3e:	2204      	movs	r2, #4
 8004d40:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004d54:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d62:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004d68:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004d7e:	481a      	ldr	r0, [pc, #104]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004d80:	f7fb fe22 	bl	80009c8 <HAL_ADC_Init>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <MX_ADC3_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004d8a:	21fd      	movs	r1, #253	; 0xfd
 8004d8c:	4818      	ldr	r0, [pc, #96]	; (8004df0 <MX_ADC3_Init+0xd8>)
 8004d8e:	f000 f9b9 	bl	8005104 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <MX_ADC3_Init+0xdc>)
 8004d94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d96:	2306      	movs	r3, #6
 8004d98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d9e:	237f      	movs	r3, #127	; 0x7f
 8004da0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004da2:	2304      	movs	r3, #4
 8004da4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004daa:	463b      	mov	r3, r7
 8004dac:	4619      	mov	r1, r3
 8004dae:	480e      	ldr	r0, [pc, #56]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004db0:	f7fc f8f6 	bl	8000fa0 <HAL_ADC_ConfigChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <MX_ADC3_Init+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004dba:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004dbe:	480c      	ldr	r0, [pc, #48]	; (8004df0 <MX_ADC3_Init+0xd8>)
 8004dc0:	f000 f9a0 	bl	8005104 <_Error_Handler>
  }


  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4807      	ldr	r0, [pc, #28]	; (8004de8 <MX_ADC3_Init+0xd0>)
 8004dca:	f7fc f8e9 	bl	8000fa0 <HAL_ADC_ConfigChannel>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <MX_ADC3_Init+0xc6>
  {
    /* Channel Configuration Error */
    Error_Handler();
 8004dd4:	f240 1111 	movw	r1, #273	; 0x111
 8004dd8:	4805      	ldr	r0, [pc, #20]	; (8004df0 <MX_ADC3_Init+0xd8>)
 8004dda:	f000 f993 	bl	8005104 <_Error_Handler>
  }


}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000007c 	.word	0x2000007c
 8004dec:	50040200 	.word	0x50040200
 8004df0:	080054b8 	.word	0x080054b8
 8004df4:	04300002 	.word	0x04300002

08004df8 <MX_DAC1_Init>:

/* DAC1 init function */
static void MX_DAC1_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac1.Instance = DAC1;
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <MX_DAC1_Init+0x5c>)
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <MX_DAC1_Init+0x60>)
 8004e02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004e04:	4813      	ldr	r0, [pc, #76]	; (8004e54 <MX_DAC1_Init+0x5c>)
 8004e06:	f7fc fe5e 	bl	8001ac6 <HAL_DAC_Init>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <MX_DAC1_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e10:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004e14:	4811      	ldr	r0, [pc, #68]	; (8004e5c <MX_DAC1_Init+0x64>)
 8004e16:	f000 f975 	bl	8005104 <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	2210      	movs	r2, #16
 8004e32:	4619      	mov	r1, r3
 8004e34:	4807      	ldr	r0, [pc, #28]	; (8004e54 <MX_DAC1_Init+0x5c>)
 8004e36:	f7fc fedb 	bl	8001bf0 <HAL_DAC_ConfigChannel>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <MX_DAC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e40:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8004e44:	4805      	ldr	r0, [pc, #20]	; (8004e5c <MX_DAC1_Init+0x64>)
 8004e46:	f000 f95d 	bl	8005104 <_Error_Handler>
  }

}
 8004e4a:	bf00      	nop
 8004e4c:	3728      	adds	r7, #40	; 0x28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000068 	.word	0x20000068
 8004e58:	40007400 	.word	0x40007400
 8004e5c:	080054b8 	.word	0x080054b8

08004e60 <MX_TIM8_Init>:

/* TIM8 init function */
static void MX_TIM8_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b096      	sub	sp, #88	; 0x58
 8004e64:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim8.Instance = TIM8;
 8004e66:	4b3d      	ldr	r3, [pc, #244]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e68:	4a3d      	ldr	r2, [pc, #244]	; (8004f60 <MX_TIM8_Init+0x100>)
 8004e6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004e6c:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e72:	4b3a      	ldr	r3, [pc, #232]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8004e78:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004e84:	4b35      	ldr	r3, [pc, #212]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004e90:	4832      	ldr	r0, [pc, #200]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004e92:	f7fe fc11 	bl	80036b8 <HAL_TIM_PWM_Init>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <MX_TIM8_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004e9c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004ea0:	4830      	ldr	r0, [pc, #192]	; (8004f64 <MX_TIM8_Init+0x104>)
 8004ea2:	f000 f92f 	bl	8005104 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004eb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4828      	ldr	r0, [pc, #160]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004eba:	f7ff f8b1 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <MX_TIM8_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ec4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004ec8:	4826      	ldr	r0, [pc, #152]	; (8004f64 <MX_TIM8_Init+0x104>)
 8004eca:	f000 f91b 	bl	8005104 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ece:	2360      	movs	r3, #96	; 0x60
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eea:	220c      	movs	r2, #12
 8004eec:	4619      	mov	r1, r3
 8004eee:	481b      	ldr	r0, [pc, #108]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004ef0:	f7fe fc0e 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <MX_TIM8_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004efa:	f240 1157 	movw	r1, #343	; 0x157
 8004efe:	4819      	ldr	r0, [pc, #100]	; (8004f64 <MX_TIM8_Init+0x104>)
 8004f00:	f000 f900 	bl	8005104 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004f3a:	f7ff f8cd 	bl	80040d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <MX_TIM8_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004f44:	f240 1167 	movw	r1, #359	; 0x167
 8004f48:	4806      	ldr	r0, [pc, #24]	; (8004f64 <MX_TIM8_Init+0x104>)
 8004f4a:	f000 f8db 	bl	8005104 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim8);
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <MX_TIM8_Init+0xfc>)
 8004f50:	f000 f9a2 	bl	8005298 <HAL_TIM_MspPostInit>

}
 8004f54:	bf00      	nop
 8004f56:	3758      	adds	r7, #88	; 0x58
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000028 	.word	0x20000028
 8004f60:	40013400 	.word	0x40013400
 8004f64:	080054b8 	.word	0x080054b8

08004f68 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <MX_USART2_UART_Init+0x60>)
 8004f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f8e:	220c      	movs	r2, #12
 8004f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <MX_USART2_UART_Init+0x5c>)
 8004fac:	f7ff f912 	bl	80041d4 <HAL_UART_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004fb6:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8004fba:	4804      	ldr	r0, [pc, #16]	; (8004fcc <MX_USART2_UART_Init+0x64>)
 8004fbc:	f000 f8a2 	bl	8005104 <_Error_Handler>
  }

}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	200000e0 	.word	0x200000e0
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	080054b8 	.word	0x080054b8

08004fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd6:	4a20      	ldr	r2, [pc, #128]	; (8005058 <MX_GPIO_Init+0x88>)
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <MX_GPIO_Init+0x88>)
 8004fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fdc:	f043 0304 	orr.w	r3, r3, #4
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <MX_GPIO_Init+0x88>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <MX_GPIO_Init+0x88>)
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <MX_GPIO_Init+0x88>)
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <MX_GPIO_Init+0x88>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <MX_GPIO_Init+0x88>)
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <MX_GPIO_Init+0x88>)
 800500a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <MX_GPIO_Init+0x88>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <MX_GPIO_Init+0x88>)
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <MX_GPIO_Init+0x88>)
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <MX_GPIO_Init+0x88>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <MX_GPIO_Init+0x8c>)
 800503e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4619      	mov	r1, r3
 800504a:	4805      	ldr	r0, [pc, #20]	; (8005060 <MX_GPIO_Init+0x90>)
 800504c:	f7fc feea 	bl	8001e24 <HAL_GPIO_Init>

}
 8005050:	bf00      	nop
 8005052:	3728      	adds	r7, #40	; 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	10210000 	.word	0x10210000
 8005060:	48000800 	.word	0x48000800

08005064 <ADC3_Get_Value>:

/* USER CODE BEGIN 4 */
uint16_t ADC3_Get_Value(ADC_HandleTypeDef* hadc){
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

	  if (HAL_ADC_Start(hadc) != HAL_OK)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fb fdff 	bl	8000c70 <HAL_ADC_Start>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d006      	beq.n	8005086 <ADC3_Get_Value+0x22>
	  {
		Error_Handler();
 8005078:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800507c:	480d      	ldr	r0, [pc, #52]	; (80050b4 <ADC3_Get_Value+0x50>)
 800507e:	f000 f841 	bl	8005104 <_Error_Handler>
		return 0;
 8005082:	2300      	movs	r3, #0
 8005084:	e012      	b.n	80050ac <ADC3_Get_Value+0x48>
	  }

	  if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8005086:	210a      	movs	r1, #10
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fb feab 	bl	8000de4 <HAL_ADC_PollForConversion>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d006      	beq.n	80050a2 <ADC3_Get_Value+0x3e>
	  {
		Error_Handler();
 8005094:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8005098:	4806      	ldr	r0, [pc, #24]	; (80050b4 <ADC3_Get_Value+0x50>)
 800509a:	f000 f833 	bl	8005104 <_Error_Handler>
		return 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	e004      	b.n	80050ac <ADC3_Get_Value+0x48>
	  }
	  else
	  {
		return HAL_ADC_GetValue(hadc);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb ff6e 	bl	8000f84 <HAL_ADC_GetValue>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b29b      	uxth	r3, r3
	  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	080054b8 	.word	0x080054b8

080050b8 <DAC1_Set_Value>:

void DAC1_Set_Value(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Data){
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	/*##-3- Set DAC Channel1 DHR register ######################################*/
	  if (HAL_DAC_SetValue(hdac, Channel, DAC_ALIGN_8B_R, Data) != HAL_OK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2208      	movs	r2, #8
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fc fd6b 	bl	8001ba6 <HAL_DAC_SetValue>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <DAC1_Set_Value+0x28>
	  {
	    /* Setting value Error */
	    Error_Handler();
 80050d6:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80050da:	4809      	ldr	r0, [pc, #36]	; (8005100 <DAC1_Set_Value+0x48>)
 80050dc:	f000 f812 	bl	8005104 <_Error_Handler>
	  }

	  /*##-4- Enable DAC Channel1 ################################################*/
	  if (HAL_DAC_Start(hdac, Channel) != HAL_OK)
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7fc fd11 	bl	8001b0a <HAL_DAC_Start>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <DAC1_Set_Value+0x40>
	  {
	    /* Start Error */
	    Error_Handler();
 80050ee:	f240 11bd 	movw	r1, #445	; 0x1bd
 80050f2:	4803      	ldr	r0, [pc, #12]	; (8005100 <DAC1_Set_Value+0x48>)
 80050f4:	f000 f806 	bl	8005104 <_Error_Handler>
	  }
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	080054b8 	.word	0x080054b8

08005104 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800510e:	e7fe      	b.n	800510e <_Error_Handler+0xa>

08005110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <HAL_MspInit+0x98>)
 8005118:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <HAL_MspInit+0x98>)
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6613      	str	r3, [r2, #96]	; 0x60
 8005122:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_MspInit+0x98>)
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_MspInit+0x98>)
 8005130:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_MspInit+0x98>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005138:	6593      	str	r3, [r2, #88]	; 0x58
 800513a:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <HAL_MspInit+0x98>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005146:	2003      	movs	r0, #3
 8005148:	f7fc fc60 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2100      	movs	r1, #0
 8005150:	f06f 000b 	mvn.w	r0, #11
 8005154:	f7fc fc65 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005158:	2200      	movs	r2, #0
 800515a:	2100      	movs	r1, #0
 800515c:	f06f 000a 	mvn.w	r0, #10
 8005160:	f7fc fc5f 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005164:	2200      	movs	r2, #0
 8005166:	2100      	movs	r1, #0
 8005168:	f06f 0009 	mvn.w	r0, #9
 800516c:	f7fc fc59 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005170:	2200      	movs	r2, #0
 8005172:	2100      	movs	r1, #0
 8005174:	f06f 0004 	mvn.w	r0, #4
 8005178:	f7fc fc53 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800517c:	2200      	movs	r2, #0
 800517e:	2100      	movs	r1, #0
 8005180:	f06f 0003 	mvn.w	r0, #3
 8005184:	f7fc fc4d 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2100      	movs	r1, #0
 800518c:	f06f 0001 	mvn.w	r0, #1
 8005190:	f7fc fc47 	bl	8001a22 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005194:	2200      	movs	r2, #0
 8005196:	2100      	movs	r1, #0
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	f7fc fc41 	bl	8001a22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40021000 	.word	0x40021000

080051ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0f      	ldr	r2, [pc, #60]	; (80051f8 <HAL_ADC_MspInit+0x4c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d117      	bne.n	80051ee <HAL_ADC_MspInit+0x42>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80051be:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <HAL_ADC_MspInit+0x50>)
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_ADC_MspInit+0x50>)
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_ADC_MspInit+0x50>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051d6:	2301      	movs	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80051da:	230b      	movs	r3, #11
 80051dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	4619      	mov	r1, r3
 80051e8:	4805      	ldr	r0, [pc, #20]	; (8005200 <HAL_ADC_MspInit+0x54>)
 80051ea:	f7fc fe1b 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80051ee:	bf00      	nop
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	50040200 	.word	0x50040200
 80051fc:	40021000 	.word	0x40021000
 8005200:	48000800 	.word	0x48000800

08005204 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <HAL_DAC_MspInit+0x4c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d118      	bne.n	8005248 <HAL_DAC_MspInit+0x44>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <HAL_DAC_MspInit+0x50>)
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_DAC_MspInit+0x50>)
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005220:	6593      	str	r3, [r2, #88]	; 0x58
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_DAC_MspInit+0x50>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800522e:	2320      	movs	r3, #32
 8005230:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005232:	2303      	movs	r3, #3
 8005234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	4619      	mov	r1, r3
 8005240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005244:	f7fc fdee 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005248:	bf00      	nop
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40007400 	.word	0x40007400
 8005254:	40021000 	.word	0x40021000

08005258 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM8)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <HAL_TIM_PWM_MspInit+0x38>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10b      	bne.n	8005282 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <HAL_TIM_PWM_MspInit+0x3c>)
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <HAL_TIM_PWM_MspInit+0x3c>)
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005274:	6613      	str	r3, [r2, #96]	; 0x60
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_TIM_PWM_MspInit+0x3c>)
 8005278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40013400 	.word	0x40013400
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_TIM_MspPostInit+0x3c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d110      	bne.n	80052cc <HAL_TIM_MspPostInit+0x34>
  /* USER CODE END TIM8_MspPostInit 0 */
  
    /**TIM8 GPIO Configuration    
    PC9     ------> TIM8_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2302      	movs	r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80052bc:	2303      	movs	r3, #3
 80052be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	4619      	mov	r1, r3
 80052c6:	4804      	ldr	r0, [pc, #16]	; (80052d8 <HAL_TIM_MspPostInit+0x40>)
 80052c8:	f7fc fdac 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40013400 	.word	0x40013400
 80052d8:	48000800 	.word	0x48000800

080052dc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_UART_MspInit+0x54>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d11c      	bne.n	8005328 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052ee:	4a11      	ldr	r2, [pc, #68]	; (8005334 <HAL_UART_MspInit+0x58>)
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_UART_MspInit+0x58>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f8:	6593      	str	r3, [r2, #88]	; 0x58
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <HAL_UART_MspInit+0x58>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005306:	230c      	movs	r3, #12
 8005308:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005312:	2303      	movs	r3, #3
 8005314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005316:	2307      	movs	r3, #7
 8005318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	4619      	mov	r1, r3
 8005320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005324:	f7fc fd7e 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005328:	bf00      	nop
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40004400 	.word	0x40004400
 8005334:	40021000 	.word	0x40021000

08005338 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800534a:	e7fe      	b.n	800534a <HardFault_Handler+0x4>

0800534c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005350:	e7fe      	b.n	8005350 <MemManage_Handler+0x4>

08005352 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005356:	e7fe      	b.n	8005356 <BusFault_Handler+0x4>

08005358 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800535c:	e7fe      	b.n	800535c <UsageFault_Handler+0x4>

0800535e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800537a:	b480      	push	{r7}
 800537c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800538c:	f7fb f8e8 	bl	8000560 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005390:	f7fc fb8c 	bl	8001aac <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005394:	bf00      	nop
 8005396:	bd80      	pop	{r7, pc}

08005398 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800539c:	4a17      	ldr	r2, [pc, #92]	; (80053fc <SystemInit+0x64>)
 800539e:	4b17      	ldr	r3, [pc, #92]	; (80053fc <SystemInit+0x64>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <SystemInit+0x68>)
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <SystemInit+0x68>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <SystemInit+0x68>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <SystemInit+0x68>)
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <SystemInit+0x68>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80053c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80053cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <SystemInit+0x68>)
 80053d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <SystemInit+0x68>)
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <SystemInit+0x68>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <SystemInit+0x68>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <SystemInit+0x64>)
 80053ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053ee:	609a      	str	r2, [r3, #8]
#endif
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000ed00 	.word	0xe000ed00
 8005400:	40021000 	.word	0x40021000

08005404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800543c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005408:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800540a:	e003      	b.n	8005414 <LoopCopyDataInit>

0800540c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800540e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005410:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005412:	3104      	adds	r1, #4

08005414 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005414:	480b      	ldr	r0, [pc, #44]	; (8005444 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005418:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800541a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800541c:	d3f6      	bcc.n	800540c <CopyDataInit>
	ldr	r2, =_sbss
 800541e:	4a0b      	ldr	r2, [pc, #44]	; (800544c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005420:	e002      	b.n	8005428 <LoopFillZerobss>

08005422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005422:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005424:	f842 3b04 	str.w	r3, [r2], #4

08005428 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <LoopForever+0x16>)
	cmp	r2, r3
 800542a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800542c:	d3f9      	bcc.n	8005422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800542e:	f7ff ffb3 	bl	8005398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005432:	f000 f811 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005436:	f7ff fb93 	bl	8004b60 <main>

0800543a <LoopForever>:

LoopForever:
    b LoopForever
 800543a:	e7fe      	b.n	800543a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800543c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005440:	08005520 	.word	0x08005520
	ldr	r0, =_sdata
 8005444:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005448:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800544c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8005450:	20000158 	.word	0x20000158

08005454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005454:	e7fe      	b.n	8005454 <ADC1_2_IRQHandler>
	...

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4e0d      	ldr	r6, [pc, #52]	; (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 800545e:	1ba4      	subs	r4, r4, r6
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2500      	movs	r5, #0
 8005464:	42a5      	cmp	r5, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4e0b      	ldr	r6, [pc, #44]	; (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	; (800549c <__libc_init_array+0x44>)
 800546c:	f000 f818 	bl	80054a0 <_init>
 8005470:	1ba4      	subs	r4, r4, r6
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2500      	movs	r5, #0
 8005476:	42a5      	cmp	r5, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005480:	4798      	blx	r3
 8005482:	3501      	adds	r5, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800548a:	4798      	blx	r3
 800548c:	3501      	adds	r5, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08005518 	.word	0x08005518
 8005494:	08005518 	.word	0x08005518
 8005498:	08005518 	.word	0x08005518
 800549c:	0800551c 	.word	0x0800551c

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
